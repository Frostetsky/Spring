<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx.xsd
    	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="app.spring" />

    <mvc:annotation-driven/>

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <bean id = "datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/student_book" />
        <property name="username" value="postgres" />
        <property name="password" value="password" />
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref = "sessionFactory" />
    </bean>

        <!-->
        BasicDataSource создаёт connection в базу данных
        TransactionManager - передает управление транзакциями Spring'y, любой метод аннотированной аннотацией
        @Transactional будет создавать новую транзакцию (об этом чуть позже)
        SessionFactory - думаю тут объяснения не нужны, создаёт SessionFactory как бин Spring'a, через LocalSessionFactoryBean
        для этого ему нужны настройки, а именно DataSource class и знать пакеты где распалагаются entity.
        <-->

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="datasource" />
        <property name="packagesToScan" value="app.spring.model" />
    </bean>

    <!-->
    Альтернатива аннотации @EnableTransactionManager (чуть подробнее о транзакциях будет в Spring Data)
    <-->
    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>