================================================================================================================
Advice типы:

* Before - выполняется до метода с основной логикой.

* After Returning - выполняется только после нормального окончания метода с основной логикой.

* After throwing - выполняется после окончания метода с основной логикой только, если выброшено исключение.

* After/ After finally - выполняется после окончания метода с основной логикой.

* Around - выполняется до и после метода с основной логикой.

================================================================================================================
@EnableAspectJAutoProxy - позволяет использовать Spring AOP Proxy.

@Aspect - говорит о том, что это не простой класс, а Aspect. Поэтому к данному классу
Spring будет относится по другому.

Advice - метод, который находится в Aspect-e и содержит сквозную логику. Advice определяет, что и когда
должно происходить. В идеале Advice должен быть небольшим и быстро работающим.

Pointcut - выражение, описывающее где должен быть применён Advice.

================================================================================================================

Spring AOP использует AspectJ Pointcut expression language. Т.е определенные правила в написании
выражений для создания Pointcut.

execution (public/protected/private/default/*) (return type/ *) (name method/ name method* / name method and path) (exception)